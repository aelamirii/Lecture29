[MUSIC] It's very often the case that we want our
directives to do more than just serve as a template holder. Which does simplify our code, making it
more readable, semantic and reusable. It's often the case that we want to
bundle behavior with the directive. We have a couple of options as
to how to get that accomplished. But one of those options is to declare
a controller directly on the directive. Let's take a look at a few
required steps to get that done. The first thing to do is to provide yet another property called controller on
our directive definition object or ddo. The value of that property should be
a function that will implement that controller. The way this function works is exactly
the same as any other controller we've been coding so far. Now if we left it at just
specifying the controller function, the properties that are declared
in our isolate scope, would now be available on the dollar
sign scope inside of our controller. Obviously we will need to inject
the dollar sign scope on our controller. Just like you would need to do that for any other controller to access
the properties on the scope. However, remember when we first
introduced controllers and we explained that it was a best practice
not to place properties directly on the scope, but place them on the instance
of the controller itself and have angular attach that controller
instance as a property of the scope. That was the controller as syntax. And this is what the other two
properties here are about. The first one,
the bind to controller property, tells angular to place our isolate
scope properties after the controller instance instead of directly on the scope. The other property specifies the label
in our controllerAs syntax so we can use that label to refer to scope properties
and methods in the html template. In this example, in our template that html we would
refer to properties using myCtrl label. Implementing the controller
function should be familiar. Since we used the controller s syntax
we should follow the best practice and attach any additional properties and
methods to the this variable. Here, I'm using yet
another best practice and that is to store a reference to the this
variable in the local variable first. Then use that local variable
to attach properties and methods to the instance
of this controller. I can now use and manipulate
the declared isolate scope properties as well as other properties that you
find here in the controller myself. Note one obvious point, since we declared
our directive scope to be isolate scope, anything we attach to that scope
is still inside the isolate scope. And not just what was mapped through
the scope declaration in the DDO, or the directive definition object. The last step is to use our properties and
methods in the directive's template. Note that I'm using the label,
myCtrl that I declared as the value of the controllerAs property on the DDO or
the directive to finish an object. One more thing worth mentioning
before we jump into the code editor. We have been declaring non-string
values with an equal sign. That's bi-directional binding. In the case of bi-directional binding,
both sides, the property in the directive and the property in the parent,
are watched for changes. And then those changes are synchronized. However, it is a best practice to
try to avoid changing the values inside the directive. Either way, certainly if we have no plans
of changing the bound value inside of the directive, we are wasting resources
because angular is setting up extra watches inside of our directive that
will be always checked but never used. So, weâ€™ll use one-way binding symbol which
is a less than symbol whenever possible. One-way binding watches only
the identity of the parent property, not the property inside the directive. Obviously, one-way binding does not change
how JavaScript fundamentally works. So, if you pass on the primitive
like a number using one-way binding, one-way binding can guarantee that
the value outside the directive will not be affected by anything you do
in the directive with a pass in value. However if you pass in an object and
your directive changes the value of a property of that object,
while no watches will be set up or triggered as a result,
the context outside your directive will definitely be affected since the change
will be visible outside of the directive. Remember that in JavaScript objects
that pass by reference and both your directive and the context outside
your directive point to the same object. So, while setting up one-way
binding will help with performance, because angular will not set up extra
watches, it simply cannot guarantee that the object's properties
aren't changed by the directive. Okay let's get back to the code editor and
see these concepts in action. [BLANK AUDIO]